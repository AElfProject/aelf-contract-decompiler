using System;
using System.IO;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Volo.Abp.AspNetCore.Mvc;
using BasicAspNetCoreApplication.Extension;
using BasicAspNetCoreApplication.Service;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Logging.Abstractions;

namespace BasicAspNetCoreApplication.Controllers
{
    interface IRegularController
    {
        Task<IActionResult> GetFilesByBase64Async(string base64String);
    }

    public class AElfInfoController : AbpController, IRegularController
    {
        private readonly IStreamService _streamService;
        private readonly IResponseService _responseService;
        private new ILogger<AElfInfoController> Logger { get; }
        private string _dllPath = "";
        private readonly string OutPathByDll = "C:\\Xxx\\OutPathByDll"; //need to specify
        private string _outputPath = "";
        private const string SystemPath = "C:\\Xxx\\TestDll"; // dll path made from base64String

        //string[] _args = {"-p", "-o", "/Users/aelf/TestProgram/Test3", "/Users/aelf/TestProgram/Test/ConsolePro.dll"};

        private string _example =
            "TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1vZGUuDQ0KJAAAAAAAAABQRQAATAEDACtIf5gAAAAAAAAAAOAAIgALATAAAAgAAAAIAAAAAAAAiiYAAAAgAAAAQAAAAABAAAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAAABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAADYmAABPAAAAAEAAAGQFAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAwAAABUJQAAVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAkAYAAAAgAAAACAAAAAIAAAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAGQFAAAAQAAAAAYAAAAKAAAAAAAAAAAAAAAAAABAAABALnJlbG9jAAAMAAAAAGAAAAACAAAAEAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAABqJgAAAAAAAEgAAAACAAUAaCAAAOwEAAABAAAAAQAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADYAcgEAAHAoCwAACgAqIgIoDAAACgAqAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAJgBAAAjfgAABAIAAPgBAAAjU3RyaW5ncwAAAAD8AwAAHAAAACNVUwAYBAAAEAAAACNHVUlEAAAAKAQAAMQAAAAjQmxvYgAAAAAAAAACAAABRxUAAAkAAAAA+gEzABYAAAEAAAANAAAAAgAAAAIAAAABAAAADAAAAAoAAAABAAAAAgAAAAAAYgEBAAAAAAAGANgAuwEGACoBuwEGADIAqAEPANsBAAAGAF0ASAEGABEBhQEGALkAhQEGAHYAhQEGAJMAhQEGAPgAhQEGAEYAhQEGAO8BeQEKABEAeQEAAAAAAQAAAAAAAQABAAAAEABxAZcBMQABAAEAUCAAAAAAkQCAASMAAQBeIAAAAACGGKIBBgACAAAAAQDqAQkAogEBABEAogEGABkAogEKACkAogEQADEAogEQADkAogEQAEEAogEQAEkAogEQAFEAogEQAFkAogEQAGkAKAAVAGEAogEGAC4ACwApAC4AEwAyAC4AGwBRAC4AIwBaAC4AKwCQAC4AMwCgAC4AOwCrAC4AQwC4AC4ASwCQAC4AUwCQAASAAAABAAAAAAAAAAAAAAAAAJcBAAAEAAIAAQAAAAAAAAAaABkAAAAAAAQAAQABAAAAAAAAABoACgAAAAAAAAAAAAA8TW9kdWxlPgBTeXN0ZW0uQ29uc29sZQBTeXN0ZW0uUnVudGltZQBXcml0ZUxpbmUARGVidWdnYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUZpbGVWZXJzaW9uQXR0cmlidXRlAEFzc2VtYmx5SW5mb3JtYXRpb25hbFZlcnNpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAENvbnNvbGVQcm8uZGxsAFByb2dyYW0AU3lzdGVtAE1haW4AU3lzdGVtLlJlZmxlY3Rpb24AQ29uc29sZVBybwAuY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBEZWJ1Z2dpbmdNb2RlcwBhcmdzAE9iamVjdAAAAAAZSABlAGwAbABvACAAVwBvAHIAbABkACEAAADOEnIOk7DvQJH3C7HuzVXQAAQgAQEIAyAAAQUgAQEREQQgAQEOBAABAQ4IsD9ffxHVCjoFAAEBHQ4IAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEABwEAAAAANQEAGC5ORVRDb3JlQXBwLFZlcnNpb249djMuMAEA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

        public AElfInfoController(IStreamService streamService, IResponseService responseService)
        {
            _streamService = streamService;
            _responseService = responseService;
            Logger = NullLogger<AElfInfoController>.Instance;
        }

        #region private methods

        [Route("GetFiles")]
        public async Task<IActionResult> GetFilesByBase64Async(string base64String)
        {
            try
            {
                base64String = _example;
                if (!base64String.IsBase64String())
                {
                    Logger.LogError($"Invalid input : {base64String}");
                    return Json(new { status = "error", message = "Null dllPath" });

                };
                var bytes = Convert.FromBase64String(base64String);

                var name = base64String.Substring(0, 8);
                var dllName = name + ".dll";
                _dllPath = Path.Combine(SystemPath, dllName);

                if (!System.IO.File.Exists(_dllPath))
                {
                    await System.IO.File.WriteAllBytesAsync(_dllPath, bytes);
                }

                _outputPath = Path.Combine(OutPathByDll, $"{name}");
                if (!Directory.Exists(_outputPath))
                {
                    Directory.CreateDirectory(_outputPath);
                }

                string[] args = { "-p", "-o", $"{_outputPath}", $"{_dllPath}" };

                await _streamService.GetLSpyOutputPathAsync(args);
                if (!Directory.Exists(_outputPath))
                {
                    Logger.LogError($"ILsycmd execute failed.");
                    return Json(new { status = "error", message = "ILsycmd execute failed." });
                }

                var jsonResult = await _responseService.GetDictJsonByPath(_outputPath);
                return Ok(jsonResult);
            }
            catch (Exception e)
            {
                Logger.LogError($"{e}");
                throw;
            }
           
        }

        #endregion
    }
}